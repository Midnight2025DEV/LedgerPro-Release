import SwiftUI
import UniformTypeIdentifiers

struct FileUploadView: View {
    @EnvironmentObject private var apiService: APIService
    @EnvironmentObject private var dataManager: FinancialDataManager
    @EnvironmentObject private var categoryService: CategoryService
    @Environment(\.dismiss) private var dismiss
    
    @State private var isDragOver = false
    @State private var selectedFile: URL?
    @State private var isProcessing = false
    @State private var currentJobId: String?
    @State private var processingStatus = ""
    @State private var showingError = false
    @State private var errorMessage = ""
    @State private var processingProgress = 0.0
    @State private var importResult: ImportResult?
    @State private var showingImportSummary = false
    
    var body: some View {
        VStack(spacing: 32) {
            // Header
            VStack(spacing: 8) {
                Image(systemName: "doc.badge.plus")
                    .font(.system(size: 48))
                    .foregroundColor(.blue)
                
                Text("Upload Financial Statement")
                    .font(.title2)
                    .fontWeight(.bold)
                
                Text("Upload PDF or CSV files to analyze your transactions")
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .fixedSize(horizontal: false, vertical: true)
            }
            
            // Upload Area
            if selectedFile == nil && !isProcessing {
                dropZone
            } else if let file = selectedFile, !isProcessing {
                selectedFileView(file: file)
            } else if isProcessing {
                processingView
            }
            
            // Action Buttons
            if !isProcessing {
                HStack(spacing: 16) {
                    Button("Cancel") {
                        dismiss()
                    }
                    .buttonStyle(.bordered)
                    
                    if selectedFile != nil {
                        Button("Upload") {
                            print("🎯 STEP 17: 🚀 UPLOAD BUTTON CLICKED!")
                            uploadFile()
                        }
                        .buttonStyle(.borderedProminent)
                    } else {
                        Button("Choose File") {
                            print("🎯 STEP 3: Choose File button clicked")
                            selectFile()
                        }
                        .buttonStyle(.borderedProminent)
                    }
                }
            }
        }
        .padding(32)
        .background(Color(NSColor.windowBackgroundColor))
        .onAppear {
            print("🎯 STEP 2: FileUploadView appeared")
        }
        .sheet(isPresented: $showingImportSummary) {
            if let result = importResult {
                ImportSummaryView(result: result) {
                    showingImportSummary = false
                    dismiss()
                }
                .frame(minWidth: 1000, idealWidth: 1200, maxWidth: .infinity,
                       minHeight: 700, idealHeight: 900, maxHeight: .infinity)
            }
        }
        .alert("Upload Error", isPresented: $showingError) {
            Button("OK") { 
                errorMessage = ""
            }
            Button("Copy Error") {
                NSPasteboard.general.clearContents()
                NSPasteboard.general.setString(errorMessage, forType: .string)
            }
        } message: {
            VStack(alignment: .leading, spacing: 8) {
                Text("Error occurred during upload:")
                    .font(.headline)
                
                Text(errorMessage)
                    .font(.system(.caption, design: .monospaced))
                    .textSelection(.enabled)
            }
        }
    }
    
    private var dropZone: some View {
        RoundedRectangle(cornerRadius: 12)
            .fill(isDragOver ? Color.blue.opacity(0.2) : Color(NSColor.controlBackgroundColor))
            .overlay(
                RoundedRectangle(cornerRadius: 12)
                    .stroke(
                        isDragOver ? Color.blue : Color.gray.opacity(0.5),
                        style: StrokeStyle(lineWidth: 2, dash: [8])
                    )
            )
            .overlay(
                VStack(spacing: 16) {
                    Image(systemName: "arrow.down.doc")
                        .font(.system(size: 48))
                        .foregroundColor(isDragOver ? .blue : .secondary)
                    
                    Text("Drop files here or click to browse")
                        .font(.headline)
                        .foregroundColor(isDragOver ? .blue : .primary)
                    
                    Text("Supports PDF and CSV files")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            )
            .frame(minHeight: 200)
            .onTapGesture {
                selectFile()
            }
            .onDrop(of: [.fileURL], isTargeted: $isDragOver) { providers in
                handleDrop(providers: providers)
            }
    }
    
    private func selectedFileView(file: URL) -> some View {
        VStack(spacing: 16) {
            HStack {
                Image(systemName: fileIcon(for: file))
                    .font(.title)
                    .foregroundColor(.blue)
                
                VStack(alignment: .leading) {
                    Text(file.lastPathComponent)
                        .font(.headline)
                    Text(fileSizeString(for: file))
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                Button {
                    if let file = selectedFile {
                        // Clean up temporary file
                        try? FileManager.default.removeItem(at: file)
                        print("🗑️ Cleaned up temporary file: \(file.lastPathComponent)")
                    }
                    selectedFile = nil
                } label: {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(.secondary)
                }
                .buttonStyle(.plain)
            }
            .padding()
            .background(Color(NSColor.controlBackgroundColor))
            .cornerRadius(8)
            
            Text("Ready to upload")
                .font(.caption)
                .foregroundColor(.secondary)
        }
    }
    
    private var processingView: some View {
        VStack(spacing: 24) {
            // Progress Bar
            VStack(spacing: 8) {
                ProgressView(value: processingProgress)
                    .progressViewStyle(LinearProgressViewStyle())
                    .scaleEffect(1.2)
                
                Text("\(Int(processingProgress * 100))% Complete")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            // Current Step
            VStack(spacing: 8) {
                Text("Processing...")
                    .font(.headline)
                
                Text(processingStatus)
                    .font(.subheadline)
                    .foregroundColor(.blue)
                    .multilineTextAlignment(.center)
                    .fontWeight(.medium)
            }
            
            // Processing Steps Indicator
            HStack(spacing: 12) {
                ProcessingStepView(title: "Upload", isCompleted: processingProgress > 0.1, isCurrent: processingProgress <= 0.1)
                ProcessingStepView(title: "Extract", isCompleted: processingProgress > 0.3, isCurrent: processingProgress > 0.1 && processingProgress <= 0.3)
                ProcessingStepView(title: "Analyze", isCompleted: processingProgress > 0.7, isCurrent: processingProgress > 0.3 && processingProgress <= 0.7)
                ProcessingStepView(title: "Categorize", isCompleted: processingProgress >= 1.0, isCurrent: processingProgress > 0.7)
            }
            
            if let jobId = currentJobId {
                Text("Job ID: \(jobId)")
                    .font(.caption2)
                    .foregroundColor(.secondary)
                    .monospaced()
            }
        }
        .padding()
    }
    
    private struct ProcessingStepView: View {
        let title: String
        let isCompleted: Bool
        let isCurrent: Bool
        
        var body: some View {
            VStack(spacing: 4) {
                ZStack {
                    Circle()
                        .fill(isCompleted ? Color.green : (isCurrent ? Color.blue : Color.gray.opacity(0.3)))
                        .frame(width: 24, height: 24)
                    
                    if isCompleted {
                        Image(systemName: "checkmark")
                            .font(.caption)
                            .foregroundColor(.white)
                            .fontWeight(.bold)
                    } else if isCurrent {
                        Circle()
                            .fill(Color.white)
                            .frame(width: 8, height: 8)
                    }
                }
                
                Text(title)
                    .font(.caption2)
                    .foregroundColor(isCompleted ? .green : (isCurrent ? .blue : .secondary))
                    .fontWeight(isCurrent ? .medium : .regular)
            }
        }
    }
    
    private func selectFile() {
        print("🎯 STEP 4: selectFile() called")
        let panel = NSOpenPanel()
        panel.allowedContentTypes = [.pdf, .commaSeparatedText, .plainText]
        panel.allowsMultipleSelection = false
        panel.canChooseDirectories = false
        panel.canChooseFiles = true
        
        print("🎯 STEP 5: About to show file picker")
        let result = panel.runModal()
        print("🎯 STEP 6: File picker result: \(result.rawValue)")
        
        if result == .OK, let url = panel.url {
            print("🎯 STEP 7: File selected: \(url.absoluteString)")
            // Start accessing the security scoped resource
            print("🎯 STEP 8: Attempting to access security scoped resource")
            guard url.startAccessingSecurityScopedResource() else {
                print("❌ STEP 8 FAILED: Failed to start accessing security scoped resource")
                errorMessage = "Cannot access the selected file. Please ensure the file is not in a restricted location and try again."
                showingError = true
                return
            }
            
            print("🎯 STEP 9: ✅ Security scoped resource access granted for: \(url.lastPathComponent)")
            
            // Immediately test file access and copy to temp location
            do {
                print("🎯 STEP 10: Attempting to read file data")
                // Test reading the file
                let testData = try Data(contentsOf: url)
                print("🎯 STEP 11: ✅ Successfully read \(testData.count) bytes from selected file")
                
                // Copy to temporary location to avoid security scoped resource issues
                print("🎯 STEP 12: Creating temporary file")
                let tempDir = FileManager.default.temporaryDirectory
                let tempFileName = "\(UUID().uuidString)_\(url.lastPathComponent)"
                let tempURL = tempDir.appendingPathComponent(tempFileName)
                
                print("🎯 STEP 13: Writing to temp location: \(tempURL.path)")
                try testData.write(to: tempURL)
                print("🎯 STEP 14: ✅ Copied file to temporary location: \(tempURL.path)")
                
                // Use the temporary file URL instead
                selectedFile = tempURL
                print("🎯 STEP 15: ✅ selectedFile set to temp URL")
                
                // Stop accessing the original file since we have a copy
                url.stopAccessingSecurityScopedResource()
                print("🎯 STEP 16: ✅ Released security scoped resource")
                
            } catch {
                print("❌ Failed to read or copy file: \(error)")
                url.stopAccessingSecurityScopedResource()
                errorMessage = "Cannot read the selected file: \(error.localizedDescription)"
                showingError = true
            }
        }
    }
    
    private func handleDrop(providers: [NSItemProvider]) -> Bool {
        for provider in providers {
            if provider.hasItemConformingToTypeIdentifier(UTType.fileURL.identifier) {
                provider.loadItem(forTypeIdentifier: UTType.fileURL.identifier, options: nil) { item, error in
                    if let data = item as? Data,
                       let url = URL(dataRepresentation: data, relativeTo: nil) {
                        DispatchQueue.main.async {
                            selectedFile = url
                        }
                    }
                }
                return true
            }
        }
        return false
    }
    
    private func uploadFile() {
        print("🎯 STEP 18: uploadFile() called")
        guard let file = selectedFile else { 
            print("❌ STEP 18 FAILED: No file selected")
            return 
        }
        
        print("🎯 STEP 19: File available: \(file.lastPathComponent)")
        // File should be a temporary copy, so no security scoped resource needed
        print("🎯 STEP 20: Using temporary file copy for upload")
        
        print("✅ Starting upload for file: \(file.lastPathComponent)")
        print("📁 File path: \(file.path)")
        print("📏 File exists: \(FileManager.default.fileExists(atPath: file.path))")
        
        isProcessing = true
        processingStatus = "Uploading file..."
        processingProgress = 0.0
        
        Task {
            do {
                // Verify file size
                let fileSize = try file.resourceValues(forKeys: [.fileSizeKey]).fileSize ?? 0
                print("📏 File size: \(fileSize) bytes")
                
                if fileSize == 0 {
                    throw APIError.uploadError("File is empty or cannot be read")
                }
                
                if fileSize > 100_000_000 { // 100MB limit
                    throw APIError.uploadError("File too large (max 100MB)")
                }
                
                // Upload file
                print("📤 Calling apiService.uploadFile...")
                let uploadResponse = try await apiService.uploadFile(file)
                currentJobId = uploadResponse.jobId
                print("✅ Upload response received, jobId: \(uploadResponse.jobId)")
                
                await MainActor.run {
                    processingStatus = "Processing document..."
                    processingProgress = 0.3
                }
                
                // Poll for completion
                print("⏳ Polling for job completion...")
                let finalStatus = try await apiService.pollJobUntilComplete(uploadResponse.jobId)
                print("🔍 Final status: \(finalStatus.status)")
                
                if finalStatus.status == "completed" {
                    await MainActor.run {
                        processingStatus = "Retrieving results..."
                        processingProgress = 0.8
                    }
                    
                    // Get transaction results
                    print("📊 Getting transaction results...")
                    let results = try await apiService.getTransactions(uploadResponse.jobId)
                    print("✅ Retrieved \(results.transactions.count) transactions")
                    
                    // Debug: Check if any transactions have forex data
                    let forexTransactions = results.transactions.filter { $0.hasForex == true }
                    if !forexTransactions.isEmpty {
                        print("💱 Found \(forexTransactions.count) foreign currency transactions in API response:")
                        for transaction in forexTransactions {
                            print("  - \(transaction.description): \(transaction.originalAmount ?? 0) \(transaction.originalCurrency ?? "??") @ \(transaction.exchangeRate ?? 0)")
                        }
                    } else {
                        print("⚠️ No foreign currency transactions found in API response")
                    }
                    
                    await MainActor.run {
                        processingStatus = "Auto-categorizing transactions..."
                        processingProgress = 0.9
                    }
                    
                    // Auto-categorize transactions
                    print("🤖 Auto-categorizing \(results.transactions.count) transactions...")
                    let categorizationService = ImportCategorizationService()
                    let categorizedResult = categorizationService.categorizeTransactions(results.transactions)
                    print("✅ Auto-categorized \(categorizedResult.categorizedCount)/\(categorizedResult.totalTransactions) transactions")
                    
                    await MainActor.run {
                        processingProgress = 1.0
                        importResult = categorizedResult
                        
                        // Add categorized transactions to data manager
                        let finalTransactions = categorizedResult.categorizedTransactions.map { $0.0 } + 
                                              categorizedResult.uncategorizedTransactions
                        
                        dataManager.addTransactions(
                            finalTransactions,
                            jobId: results.jobId,
                            filename: results.metadata.filename
                        )
                        
                        print("🎉 Upload completed successfully!")
                        
                        // Show import summary instead of immediately dismissing
                        showingImportSummary = true
                    }
                } else {
                    print("❌ Processing failed with status: \(finalStatus.status)")
                    await MainActor.run {
                        errorMessage = finalStatus.error ?? "Processing failed with status: \(finalStatus.status)"
                        showingError = true
                        isProcessing = false
                    }
                }
                
            } catch {
                print("❌ Upload error: \(error)")
                if let apiError = error as? APIError {
                    print("🔍 API Error details: \(apiError.errorDescription ?? "Unknown")")
                }
                
                await MainActor.run {
                    errorMessage = error.localizedDescription
                    showingError = true
                    isProcessing = false
                    selectedFile = nil
                }
            }
        }
    }
    
    private func fileIcon(for url: URL) -> String {
        let pathExtension = url.pathExtension.lowercased()
        switch pathExtension {
        case "pdf":
            return "doc.richtext"
        case "csv":
            return "tablecells"
        default:
            return "doc"
        }
    }
    
    private func fileSizeString(for url: URL) -> String {
        do {
            let resourceValues = try url.resourceValues(forKeys: [.fileSizeKey])
            if let fileSize = resourceValues.fileSize {
                let formatter = ByteCountFormatter()
                formatter.countStyle = .file
                return formatter.string(fromByteCount: Int64(fileSize))
            }
        } catch {
            print("Error getting file size: \(error)")
        }
        return "Unknown size"
    }
}

struct ErrorDisplayView: View {
    let errorMessage: String
    let onDismiss: () -> Void
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                Image(systemName: "exclamationmark.triangle.fill")
                    .font(.system(size: 48))
                    .foregroundColor(.red)
                
                Text("Upload Error")
                    .font(.title2)
                    .fontWeight(.bold)
                
                ScrollView {
                    VStack(alignment: .leading, spacing: 12) {
                        Text("Error Details:")
                            .font(.headline)
                        
                        Text(errorMessage)
                            .font(.system(.body, design: .monospaced))
                            .textSelection(.enabled)
                            .padding()
                            .background(Color(NSColor.controlBackgroundColor))
                            .cornerRadius(8)
                    }
                }
                
                HStack(spacing: 16) {
                    Button("Copy Error") {
                        NSPasteboard.general.clearContents()
                        NSPasteboard.general.setString(errorMessage, forType: .string)
                    }
                    .buttonStyle(.bordered)
                    
                    Button("Close") {
                        onDismiss()
                    }
                    .buttonStyle(.borderedProminent)
                }
            }
            .padding(32)
            .frame(minWidth: 800, maxWidth: .infinity,
                   minHeight: 600, maxHeight: .infinity)
            .navigationTitle("Error Details")
        }
    }
}

struct ImportSummaryView: View {
    let result: ImportResult
    let onDismiss: () -> Void
    
    @State private var showingCategorizedDetails = false
    @State private var showingUncategorizedDetails = false
    @State private var selectedLayout: LayoutMode = .adaptive
    
    enum LayoutMode {
        case adaptive, compact, expanded
    }
    
    var body: some View {
        NavigationView {
            GeometryReader { geometry in
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: 24) {
                        // Header
                        headerSection
                        
                        // Adaptive Layout Based on Screen Size
                        if geometry.size.width < 1000 || selectedLayout == .compact {
                            compactLayout
                        } else {
                            expandedLayout(geometry: geometry)
                        }
                        
                        // Collapsible Transaction Details
                        transactionDetailsSection
                        
                        Spacer(minLength: 20)
                        
                        // Action Buttons
                        actionButtonsSection
                    }
                    .frame(maxWidth: .infinity)
                    .padding(.bottom, 32)
                }
                .frame(maxWidth: .infinity)
                .clipped()
                .padding(32)
                .navigationTitle("Import Summary")
                .toolbar {
                    ToolbarItem(placement: .primaryAction) {
                        layoutPickerMenu
                    }
                }
            }
        }
        // Remove fixed frame constraints - let content drive size
    }
    
    private var headerSection: some View {
        VStack(spacing: 12) {
            Image(systemName: result.totalTransactions > 0 ? "checkmark.circle.fill" : "exclamationmark.triangle.fill")
                .font(.system(size: 48))
                .foregroundColor(result.totalTransactions > 0 ? .green : .orange)
            
            Text(result.totalTransactions > 0 ? "Import Complete!" : "Import Completed with Issues")
                .font(.title2)
                .fontWeight(.bold)
            
            Text(result.totalTransactions > 0 ? 
                 "Your transactions have been imported and auto-categorized" :
                 "No transactions were found in the uploaded file")
                .font(.body)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
        }
    }
    
    private var compactLayout: some View {
        VStack(spacing: 20) {
            // Stats in 2x2 grid
            LazyVGrid(columns: [
                GridItem(.flexible(), spacing: 16),
                GridItem(.flexible(), spacing: 16)
            ], spacing: 20) {
                statBoxes
            }
            
            // Progress bar below
            progressSection
        }
    }
    
    private func expandedLayout(geometry: GeometryProxy) -> some View {
        let availableWidth = geometry.size.width - 64  // Account for padding
        let columnWidth = (availableWidth - 24) / 2    // 24px spacing between columns
        
        return HStack(spacing: 24) {
            // Left side - Stats
            VStack(spacing: 20) {
                LazyVGrid(columns: [
                    GridItem(.flexible(), spacing: 12),
                    GridItem(.flexible(), spacing: 12)
                ], spacing: 16) {
                    statBoxes
                }
            }
            .frame(width: columnWidth)
            
            // Right side - Progress and insights
            VStack(spacing: 20) {
                progressSection
                
                if result.totalTransactions > 0 {
                    insightsSection
                }
            }
            .frame(width: columnWidth)
        }
    }
    
    @ViewBuilder
    private var statBoxes: some View {
        StatBox(
            title: "Total",
            value: "\(result.totalTransactions)",
            color: .blue,
            icon: "list.bullet"
        )
        
        StatBox(
            title: "Categorized",
            value: "\(result.categorizedCount)",
            subtitle: "\(Int(result.successRate * 100))%",
            color: .green,
            icon: "checkmark.circle"
        )
        
        StatBox(
            title: "High Confidence",
            value: "\(result.highConfidenceCount)",
            color: .purple,
            icon: "star.fill"
        )
        
        StatBox(
            title: "Need Review",
            value: "\(result.uncategorizedCount)",
            color: .orange,
            icon: "exclamationmark.triangle"
        )
    }
    
    private var progressSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text("Categorization Rate")
                    .font(.headline)
                Spacer()
                Text("\(Int(result.successRate * 100))%")
                    .font(.headline)
                    .foregroundColor(result.successRate > 0.8 ? .green : result.successRate > 0.6 ? .orange : .red)
            }
            
            ProgressView(value: result.successRate)
                .progressViewStyle(LinearProgressViewStyle(tint: result.successRate > 0.8 ? .green : result.successRate > 0.6 ? .orange : .red))
                .scaleEffect(1.2)
            
            // Success rate insights
            Text(successRateInsight)
                .font(.caption)
                .foregroundColor(.secondary)
                .italic()
        }
        .padding()
        .background(Color(NSColor.controlBackgroundColor))
        .cornerRadius(12)
    }
    
    private var insightsSection: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("Quick Insights")
                .font(.headline)
            
            VStack(alignment: .leading, spacing: 4) {
                if result.highConfidenceCount > 0 {
                    Label("\(result.highConfidenceCount) transactions categorized with high confidence", systemImage: "star.fill")
                        .font(.caption)
                        .foregroundColor(.purple)
                }
                
                if result.uncategorizedCount > 0 {
                    Label("\(result.uncategorizedCount) transactions need manual review", systemImage: "exclamationmark.triangle")
                        .font(.caption)
                        .foregroundColor(.orange)
                }
                
                if result.categorizedCount == result.totalTransactions && result.totalTransactions > 0 {
                    Label("Perfect! All transactions were categorized", systemImage: "checkmark.seal.fill")
                        .font(.caption)
                        .foregroundColor(.green)
                }
            }
        }
        .padding()
        .background(Color(NSColor.controlBackgroundColor))
        .cornerRadius(12)
    }
    
    private var transactionDetailsSection: some View {
        VStack(spacing: 16) {
            if result.totalTransactions == 0 {
                // Empty state - compatible with macOS 13.0+
                VStack(spacing: 16) {
                    Image(systemName: "doc.text.magnifyingglass")
                        .font(.system(size: 48))
                        .foregroundColor(.secondary)
                    
                    Text("No Transactions Found")
                        .font(.title2)
                        .fontWeight(.semibold)
                    
                    Text("The uploaded file didn't contain any recognizable transactions. Try uploading a different file or check the file format.")
                        .font(.body)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal)
                    
                    Button("Upload Different File") {
                        onDismiss()
                    }
                    .buttonStyle(.borderedProminent)
                }
                .frame(minHeight: 200)
                .padding()
                .background(Color(NSColor.controlBackgroundColor))
                .cornerRadius(12)
            } else {
                // Categorized transactions
                if !result.categorizedTransactions.isEmpty {
                    DisclosureGroup("Categorized Transactions (\(result.categorizedCount))", isExpanded: $showingCategorizedDetails) {
                        LazyVStack(spacing: 8) {
                            ForEach(Array(result.categorizedTransactions.prefix(10).enumerated()), id: \.offset) { index, item in
                                let (transaction, category, confidence) = item
                                ImportTransactionRowView(transaction: transaction, category: category, confidence: confidence)
                            }
                            
                            if result.categorizedTransactions.count > 10 {
                                Text("... and \(result.categorizedTransactions.count - 10) more")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                    .padding(.top, 8)
                            }
                        }
                        .padding(.top, 8)
                    }
                    .padding()
                    .background(Color(NSColor.controlBackgroundColor))
                    .cornerRadius(12)
                }
                
                // Uncategorized transactions
                if !result.uncategorizedTransactions.isEmpty {
                    DisclosureGroup("Uncategorized Transactions (\(result.uncategorizedCount))", isExpanded: $showingUncategorizedDetails) {
                        LazyVStack(spacing: 8) {
                            ForEach(Array(result.uncategorizedTransactions.prefix(10).enumerated()), id: \.offset) { index, transaction in
                                ImportTransactionRowView(transaction: transaction, category: nil, confidence: nil)
                            }
                            
                            if result.uncategorizedTransactions.count > 10 {
                                Text("... and \(result.uncategorizedTransactions.count - 10) more")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                    .padding(.top, 8)
                            }
                        }
                        .padding(.top, 8)
                    }
                    .padding()
                    .background(Color(NSColor.controlBackgroundColor))
                    .cornerRadius(12)
                }
            }
        }
    }
    
    private var actionButtonsSection: some View {
        VStack(spacing: 12) {
            Button("Continue to Dashboard") {
                onDismiss()
            }
            .buttonStyle(.borderedProminent)
            .controlSize(.large)
            
            if result.uncategorizedCount > 0 {
                Button("Review Uncategorized (\(result.uncategorizedCount))") {
                    // Future enhancement: Navigate to transaction list filtered by uncategorized
                    onDismiss()
                }
                .buttonStyle(.bordered)
            }
            
            if result.totalTransactions == 0 {
                Button("Try Different File") {
                    onDismiss()
                }
                .buttonStyle(.bordered)
            }
        }
    }
    
    private var layoutPickerMenu: some View {
        Menu {
            Button("Adaptive Layout") {
                selectedLayout = .adaptive
            }
            Button("Compact Layout") {
                selectedLayout = .compact
            }
            Button("Expanded Layout") {
                selectedLayout = .expanded
            }
        } label: {
            Image(systemName: "rectangle.3.group")
        }
    }
    
    private var successRateInsight: String {
        switch result.successRate {
        case 0.9...1.0:
            return "Excellent! Most transactions were automatically categorized."
        case 0.7..<0.9:
            return "Good categorization rate. A few transactions need review."
        case 0.5..<0.7:
            return "Moderate success. Consider reviewing categorization rules."
        case 0.1..<0.5:
            return "Low categorization rate. Manual review recommended."
        default:
            return "No transactions were automatically categorized."
        }
    }
}

struct ImportTransactionRowView: View {
    let transaction: Transaction
    let category: Category?
    let confidence: Double?
    
    var body: some View {
        HStack(spacing: 12) {
            // Transaction type icon
            Image(systemName: transaction.isIncome ? "plus.circle.fill" : "minus.circle.fill")
                .foregroundColor(transaction.isIncome ? .green : .red)
                .font(.system(size: 16))
            
            // Transaction details
            VStack(alignment: .leading, spacing: 2) {
                Text(transaction.description)
                    .font(.system(size: 13, weight: .medium))
                    .lineLimit(1)
                
                HStack {
                    Text(transaction.formattedDate, style: .date)
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    if let category = category {
                        Text("•")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Text(category.name)
                            .font(.caption)
                            .foregroundColor(.blue)
                    } else {
                        Text("•")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Text(transaction.category)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
            }
            
            Spacer()
            
            // Amount and confidence
            VStack(alignment: .trailing, spacing: 2) {
                Text(transaction.displayAmount)
                    .font(.system(size: 13, weight: .semibold))
                    .foregroundColor(transaction.isIncome ? .green : .primary)
                
                if let confidence = confidence {
                    HStack(spacing: 2) {
                        Image(systemName: confidence > 0.8 ? "star.fill" : confidence > 0.6 ? "star.leadinghalf.filled" : "star")
                            .font(.system(size: 8))
                            .foregroundColor(confidence > 0.8 ? .purple : confidence > 0.6 ? .orange : .gray)
                        
                        Text("\(Int(confidence * 100))%")
                            .font(.system(size: 10))
                            .foregroundColor(.secondary)
                    }
                } else {
                    Text("Uncategorized")
                        .font(.system(size: 10))
                        .foregroundColor(.orange)
                }
            }
        }
        .padding(.horizontal, 12)
        .padding(.vertical, 8)
        .background(Color(NSColor.controlBackgroundColor).opacity(0.5))
        .cornerRadius(8)
    }
}

struct StatBox: View {
    let title: String
    let value: String
    var subtitle: String? = nil
    let color: Color
    let icon: String
    
    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(color)
            
            Text(value)
                .font(.title)
                .fontWeight(.bold)
                .foregroundColor(color)
            
            if let subtitle = subtitle {
                Text(subtitle)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Text(title)
                .font(.caption)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
        .padding()
        .background(color.opacity(0.1))
        .cornerRadius(12)
    }
}

#Preview {
    FileUploadView()
        .environmentObject(APIService())
        .environmentObject(FinancialDataManager())
        .environmentObject(CategoryService.shared)
}