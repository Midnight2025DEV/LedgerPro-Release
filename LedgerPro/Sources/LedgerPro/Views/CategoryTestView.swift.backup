import SwiftUI

/// Test view for the category system - displays hierarchical categories with management features
struct CategoryTestView: View {
    @Environment(\.dismiss) private var dismiss
    @StateObject private var categoryService = CategoryService.shared
    @State private var showAddCategory = false
    @State private var selectedCategory: Category?
    @State private var showCategoryDetails = false
    @State private var searchText = ""
    
    var filteredCategories: [Category] {
        if searchText.isEmpty {
            return categoryService.rootCategories
        } else {
            return categoryService.categories.filter { 
                $0.name.localizedCaseInsensitiveContains(searchText) 
            }
        }
    }
    
    var body: some View {
        VStack(spacing: 0) {
            // Header with stats
            CategoryStatsView(categoryService: categoryService)
                .frame(maxWidth: .infinity)
                .padding(.horizontal, 40)
            
            Divider()
            
            // Search bar
            HStack {
                Image(systemName: "magnifyingglass")
                    .foregroundColor(.secondary)
                
                TextField("Search categories...", text: $searchText)
                    .textFieldStyle(.plain)
            }
            .padding(.horizontal, 40)
            .padding(.vertical, 12)
            .background(Color(NSColor.controlBackgroundColor))
            .frame(maxWidth: .infinity)
            
            Divider()
            
            // Category list
            if categoryService.isLoading {
                VStack(spacing: 16) {
                    ProgressView()
                        .scaleEffect(1.2)
                    
                    Text("Loading categories...")
                        .foregroundColor(.secondary)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else if categoryService.categories.isEmpty {
                VStack(spacing: 16) {
                    Image(systemName: "folder.badge.plus")
                        .font(.system(size: 48))
                        .foregroundColor(.secondary)
                    
                    Text("No categories found")
                        .font(.headline)
                        .foregroundColor(.secondary)
                    
                    Text("Categories will be initialized automatically")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Button("Reload Categories") {
                        Task {
                            await categoryService.loadCategories()
                        }
                    }
                    .buttonStyle(.borderedProminent)
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            } else {
                ScrollView {
                    LazyVGrid(columns: [
                        GridItem(.adaptive(minimum: 280, maximum: .infinity), spacing: 16),
                        GridItem(.adaptive(minimum: 280, maximum: .infinity), spacing: 16),
                        GridItem(.adaptive(minimum: 280, maximum: .infinity), spacing: 16)
                    ], spacing: 16) {
                            ForEach(categoryService.rootCategories) { rootCategory in
                                Section {
                                    // Root category header
                                    VStack(alignment: .leading, spacing: 12) {
                                        HStack {
                                            Circle()
                                                .fill(Color(hex: rootCategory.color) ?? .gray)
                                                .frame(width: 32, height: 32)
                                            
                                            Text(rootCategory.icon)
                                                .font(.title2)
                                            
                                            VStack(alignment: .leading, spacing: 2) {
                                                Text(rootCategory.name)
                                                    .font(.headline)
                                                    .lineLimit(1)
                                                    .truncationMode(.tail)
                                                
                                                Text("\(rootCategory.children?.count ?? 0) subcategories")
                                                    .font(.caption)
                                                    .foregroundColor(.secondary)
                                                    .lineLimit(1)
                                            }
                                            .frame(maxWidth: .infinity, alignment: .leading)
                                            
                                            Spacer()
                                            
                                            if rootCategory.isSystem {
                                                Text("SYSTEM")
                                                    .font(.caption2)
                                                    .padding(.horizontal, 6)
                                                    .padding(.vertical, 2)
                                                    .background(Color.blue.opacity(0.2))
                                                    .foregroundColor(.blue)
                                                    .cornerRadius(4)
                                            }
                                        }
                                        .padding()
                                        .background(Color(NSColor.controlBackgroundColor))
                                        .cornerRadius(8)
                                        
                                        // Show child categories
                                        if let children = rootCategory.children {
                                            ForEach(children) { child in
                                                HStack {
                                                    Text(child.icon)
                                                        .font(.body)
                                                    Text(child.name)
                                                        .font(.subheadline)
                                                        .lineLimit(1)
                                                        .truncationMode(.tail)
                                                        .fixedSize(horizontal: false, vertical: true)
                                                    Spacer()
                                                }
                                                .padding(.horizontal, 16)
                                                .padding(.vertical, 8)
                                                .background(Color(NSColor.controlBackgroundColor).opacity(0.5))
                                                .cornerRadius(6)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        .padding(20)
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                }
            }
            .frame(maxWidth: .infinity)
            .navigationTitle("Category System Test")
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Done") {
                        dismiss()
                    }
                }
                
                ToolbarItemGroup(placement: .primaryAction) {
                    // Refresh button
                    Button(action: { 
                        Task { await categoryService.loadCategories() }
                    }) {
                        Label("Refresh", systemImage: "arrow.clockwise")
                    }
                    .disabled(categoryService.isLoading)
                    
                    // Add category button
                    Button(action: { showAddCategory = true }) {
                        Label("Add Category", systemImage: "plus.circle.fill")
                    }
                    
                    // Reset button (for testing)
                    Button(action: {
                        Task { await categoryService.resetCategories() }
                    }) {
                        Label("Reset", systemImage: "trash.circle")
                    }
                    .foregroundColor(.red)
                }
            }
            .sheet(isPresented: $showAddCategory) {
                AddCategoryView()
            }
            .sheet(isPresented: $showCategoryDetails) {
                if let category = selectedCategory {
                    CategoryDetailView(category: category)
                }
            }
            .frame(minWidth: 1200, minHeight: 700)
            .onAppear {
                Task {
                    await categoryService.loadCategories()
                }
            }
    }

// MARK: - Category Stats View

struct CategoryStatsView: View {
    let categoryService: CategoryService
    
    var systemCategoriesCount: Int {
        categoryService.categories.filter { $0.isSystem }.count
    }
    
    var customCategoriesCount: Int {
        categoryService.categories.filter { !$0.isSystem }.count
    }
    
    var body: some View {
        HStack(spacing: 16) {
            CategoryStatCard(
                title: "Total",
                value: "\(categoryService.categories.count)",
                icon: "folder.fill",
                color: .blue
            )
            
            CategoryStatCard(
                title: "Root Categories",
                value: "\(categoryService.rootCategories.count)",
                icon: "folder.fill",
                color: .green
            )
            
            CategoryStatCard(
                title: "System Categories",
                value: "\(systemCategoriesCount)",
                icon: "gear",
                color: .orange
            )
            
            CategoryStatCard(
                title: "Custom Categories",
                value: "\(customCategoriesCount)",
                icon: "person.crop.circle",
                color: .purple
            )
        }
        .padding(.horizontal, 40)
        .padding(.vertical, 16)
    }
}

struct CategoryStatCard: View {
    let title: String
    let value: String
    let icon: String
    let color: Color
    
    var body: some View {
        HStack(spacing: 12) {
            Image(systemName: icon)
                .font(.title3)
                .foregroundColor(color)
                .frame(width: 32, height: 32)
                .background(color.opacity(0.15))
                .cornerRadius(6)
            
            VStack(alignment: .leading, spacing: 0) {
                Text(value)
                    .font(.title3)
                    .fontWeight(.bold)
                    .foregroundColor(.primary)
                Text(title)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(Color(NSColor.controlBackgroundColor))
        .cornerRadius(8)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(color.opacity(0.3), lineWidth: 1)
        )
    }
}

// MARK: - Category Row View

struct CategoryRowView: View {
    let category: Category
    let level: Int
    let categoryService: CategoryService
    let onCategoryTapped: (Category) -> Void
    var showHierarchyPath: Bool = false
    
    @State private var isExpanded = true
    
    private var children: [Category] {
        category.children ?? []
    }
    
    private var hasChildren: Bool {
        !children.isEmpty
    }
    
    var body: some View {
        VStack(alignment: .leading, spacing: 4) {
            // Main category row
            HStack(spacing: 12) {
                // Color indicator
                Circle()
                    .fill(Color(hex: category.color) ?? .gray)
                    .frame(width: 24, height: 24)
                
                // Icon
                Text(category.icon)
                    .font(.title3)
                    .frame(width: 28)
                
                // Name and info
                VStack(alignment: .leading, spacing: 2) {
                    Text(category.name)
                        .font(.system(size: 13, weight: .medium))
                        .lineLimit(1)
                    
                    HStack(spacing: 6) {
                        if let childCount = category.children?.count, childCount > 0 {
                            Text("\(childCount) subcategories")
                                .font(.caption2)
                                .foregroundColor(.secondary)
                        }
                        
                        if category.isSystem {
                            Text("SYSTEM")
                                .font(.caption2)
                                .padding(.horizontal, 4)
                                .padding(.vertical, 1)
                                .background(Color.blue.opacity(0.2))
                                .foregroundColor(.blue)
                                .cornerRadius(3)
                        }
                    }
                }
                
                Spacer()
                
                // Debug ID
                Text(String(category.id.uuidString.prefix(6)))
                    .font(.system(size: 10, design: .monospaced))
                    .foregroundColor(.secondary)
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 8)
            .background(Color(NSColor.controlBackgroundColor))
            .cornerRadius(6)
            .overlay(
                RoundedRectangle(cornerRadius: 6)
                    .stroke(Color.clear, lineWidth: 2)
            )
            .onTapGesture {
                onCategoryTapped(category)
            }
            
            // Child categories
            if isExpanded && hasChildren && !showHierarchyPath {
                VStack(spacing: 2) {
                    ForEach(children) { child in
                        CategoryRowView(
                            category: child,
                            level: level + 1,
                            categoryService: categoryService,
                            onCategoryTapped: onCategoryTapped
                        )
                        .padding(.leading, 20)
                    }
                }
            }
        }
        .padding(.horizontal, level > 0 ? 8 : 4)
    }
}

// MARK: - Category Detail View

struct CategoryDetailView: View {
    let category: Category
    @Environment(\.dismiss) var dismiss
    @StateObject private var categoryService = CategoryService.shared
    
    var body: some View {
        NavigationView {
            Form {
                Section("Basic Information") {
                    HStack {
                        Text("Name")
                        Spacer()
                        Text(category.name)
                            .fontWeight(.medium)
                    }
                    
                    HStack {
                        Text("Icon")
                        Spacer()
                        Text(category.icon)
                            .font(.title2)
                    }
                    
                    HStack {
                        Text("Color")
                        Spacer()
                        Circle()
                            .fill(category.swiftUIColor)
                            .frame(width: 24, height: 24)
                        Text(category.color)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                
                Section("Hierarchy") {
                    HStack {
                        Text("ID")
                        Spacer()
                        Text(category.id.uuidString)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    
                    if let parentId = category.parentId {
                        HStack {
                            Text("Parent ID")
                            Spacer()
                            Text(parentId.uuidString)
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        
                        HStack {
                            Text("Full Path")
                            Spacer()
                            Text(categoryService.hierarchyPath(for: category.id))
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    } else {
                        HStack {
                            Text("Level")
                            Spacer()
                            Text("Root Category")
                                .foregroundColor(.blue)
                        }
                    }
                    
                    if let children = category.children, !children.isEmpty {
                        HStack {
                            Text("Children")
                            Spacer()
                            Text("\(children.count) subcategories")
                                .foregroundColor(.secondary)
                        }
                    }
                }
                
                Section("Metadata") {
                    HStack {
                        Text("Type")
                        Spacer()
                        Text(category.isSystem ? "System Category" : "Custom Category")
                            .foregroundColor(category.isSystem ? .blue : .green)
                    }
                    
                    HStack {
                        Text("Sort Order")
                        Spacer()
                        Text("\(category.sortOrder)")
                            .foregroundColor(.secondary)
                    }
                    
                    HStack {
                        Text("Active")
                        Spacer()
                        Text(category.isActive ? "Yes" : "No")
                            .foregroundColor(category.isActive ? .green : .red)
                    }
                    
                    if let budget = category.budgetAmount {
                        HStack {
                            Text("Budget")
                            Spacer()
                            Text("$\(budget)")
                                .foregroundColor(.blue)
                        }
                    }
                }
                
                Section("Timestamps") {
                    HStack {
                        Text("Created")
                        Spacer()
                        Text(category.createdAt.formatted(date: .abbreviated, time: .shortened))
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    
                    HStack {
                        Text("Updated")
                        Spacer()
                        Text(category.updatedAt.formatted(date: .abbreviated, time: .shortened))
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
            }
            .navigationTitle("Category Details")
            .toolbar {
                ToolbarItem(placement: .confirmationAction) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
        .frame(width: 500, height: 600)
    }
}

#Preview {
    CategoryTestView()
}